{"version":3,"sources":["index.jsx"],"names":["hideLabel","hideLabelWhenSelected","props","value","ReferenceError","call","self","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","SelectButton","labelStyleClasses","onClick","join","className","expanded","readonly","React","createElement","onKeyDown","aria-expanded","disabled","label","type","highlighted","selected","hasRendered","_classCallCheck","this","SelectDropdown","_this","getPrototypeOf","state","options","updateSearch","target","handleChange","bind","searchValue","key","top","buttonRect","button","getBoundingClientRect","_this2","changeHighlight","to","indexOf","console","log","index","length","scrollToHighlighted","e","which","keyCode","preventDefault","stopPropagation","selectOption","window","addEventListener","behavior","search","block","focus","removeEventListener","createNew","option","some","a","_this4","setState","placeDropdown","ref","dropdown","style","hideSearch","input","onChange","name","_","classes","content","role","map","query","Dropdawn","_this5","onButtonKeyDown","open","getOptions","slice","removeSelectedText","_createClass","unshift","_this6","onInput","apiCall","then","filter","displayName","toLowerCase","undefined","hasParent","parent","close","root","element","parentElement","shiftkey","ctrlKey","altKey","code","document","clickOutsideOfWidget","body","classList","remove","nextProps","cleanUp","_this7","onkeydown","getButtonContent","viewLink","viewLinkText","Component"],"mappings":"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","file":"dropdawn-1.0.2.js","sourcesContent":["\nfunction SelectButton(props) {\n  \n  const labelStyleClasses = [\n    'dropdown__label',\n    props.value ? 'dropdown__label--float-above' : '',\n  ].join(' ');\n\n  const className = 'dropdown__button' + (props.expanded ? ' dropdown__button--focus' : '') + (props.readonly ? ' dropdown__button--readonly' : '');\n  const hideLabel = props.hideLabelWhenSelected && props.value;\n\n  return (\n    <button\n      className={className}\n      onClick={props.onClick}\n      onKeyDown={props.onKeyDown}\n      role=\"combobox\"\n      aria-expanded={props.expanded}\n      disabled={props.disabled}\n      readonly={props.readonly}\n      type=\"button\"\n      >\n      <div className=\"dropdown__button--text-wrapper\">\n        {hideLabel ? null : <div className={labelStyleClasses}>{props.label}</div>}\n        <div className=\"dropdown__selected-text\">{props.value}</div>\n      </div>\n      {props.readonly ? null : <i className=\"material-icons dropdown__button--icon\">arrow_drop_down</i>}\n    </button>\n  );\n}\n\nclass SelectDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      highlighted: this.props.selected || this.props.options[0],\n      searchValue: this.props.query,\n      // Used to place dropdown, it must be placed after first render, when we know its height\n      hasRendered: false\n    }\n    \n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  handleChange(event) {\n    this.setState({searchValue: event.target.value});\n    this.props.updateSearch(event.target.value, false);\n  }\n  \n  /* \n   * Try to place dropdown such that it is visible on screen, don't cover the dropdown button\n   * and preferable is below button if space.\n   *\n   */\n  placeDropdown() {\n    if(!this.dropdown) return {};\n    // Either below, if it is space.\n    // Or \"best as possible\"\n    const buttonRect = this.props.button.getBoundingClientRect();\n    const dropdownRect = this.dropdown.getBoundingClientRect();\n    const innerHeight = window.innerHeight;\n    \n    if(buttonRect.top + buttonRect.height + dropdownRect.height > innerHeight) return {bottom: 0}\n    \n    return {top: (buttonRect.top + buttonRect.height) + 'px'};\n  }\n  \n \n  /*\n  * Move highlight up and down on arrow up/down.\n  * Make selection and close on Enter and Space.\n  * Close without changing selection on Esc.\n  */\n  onKeyDown(e) {\n    \n    const changeHighlight = to => {\n      var index = this.props.options.indexOf(this.state.highlighted) + to;\n      console.log('change highlighted' + index)\n      if(index < 0 || index >= this.props.options.length) return;\n      this.setState({highlighted: this.props.options[index]}, this.scrollToHighlighted.bind(this, false));\n    }\n\n    // Select next\n    switch(e.which || e.keyCode) {\n      case 40:\n        changeHighlight(1);\n        break;\n      case 38:\n        changeHighlight(-1);\n        break;\n\n      case 13: // Enter\n        if(this.props.options.length === 0) {\n          e.preventDefault();\n          e.stopPropagation;\n          return false;\n        }\n        this.props.selectOption(this.state.highlighted);\n        e.preventDefault();\n        break;\n      case 27: // Esc\n        this.props.selectOption(this.props.selected);\n        break;\n      case 9: // Tab: Do nothing\n        e.preventDefault();\n        e.stopPropagation;\n        return false;\n        break;\n    }\n  }\n  \n  scrollToHighlighted(instant) {\n    const highlighted = this.theList.querySelector('.highlighted');\n    if(highlighted === null) return;\n    highlighted.scrollIntoView({\n      behavior: instant ? 'instant' : 'smooth',\n      block: 'nearest',\n      inline: 'nearest'\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.onKeyDown);\n    let search = this.search;\n    if(!search) return;\n    search.focus();\n    search.selectionStart = search.selectionEnd = search.value.length;\n    this.setState({hasRendered: true});\n    this.scrollToHighlighted(true);\n  }\n  \n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.onKeyDown);\n  }\n\n  createNew() {\n    const cb = option => this.props.selectOption(option);\n    this.props.createNew(cb);\n  }\n  \n  render () {\n    if(this.props.options.length > 0 && !this.props.options.some(a => a.value === this.state.highlighted.value)) {\n      this.setState(prevState => ({highlighted: this.props.options[0]}))\n    }\n    \n    return (\n      <div ref={dropdown => this.dropdown = dropdown} style={this.placeDropdown()} className=\"dropdown__dropdown-container\">\n        {!this.props.hideSearch ? (<div className=\"dropdown__searchBox--container\">\n          <input\n            className=\"dropdown__searchBox--input\"\n            ref={input => this.search = input}\n            onChange={this.handleChange}\n            name=\"searchbox\"\n            value={this.state.searchValue} />\n          <i className=\"material-icons dropdown__searchBox--icon\">search</i>\n          {\n            this.props.createNew ? \n              <button onClick={_ => this.createNew()} className=\"dropdown__searchBox--addNew\"><i className=\"material-icons\">add</i></button> :\n            null\n          }\n        </div>) : null}\n        <div className=\"dropdown__options--container\">\n          <ul ref={theList => this.theList = theList} className=\"dropdown__options\" role=\"listbox\">\n          {this.props.options.map((option, index) => {\n            const classes = ['dropdown__options--list-item', (this.state.highlighted.value === option.value ? ' highlighted' : '')].join(' ');\n            return <li key={option.value} role=\"option\" onClick={e => this.props.selectOption(option)} className={classes}>\n              {option.content}\n            </li>;\n          })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Dropdawn extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      selected: props.selected || null,\n      open: false,\n      // Props options: All available options, State options: The one you can see after filtering etc.\n      options: this.getOptions(),\n      query: ''\n    };\n    \n    this.clickOutsideOfWidget = this.clickOutsideOfWidget.bind(this);\n    this.onButtonKeyDown = this.onButtonKeyDown.bind(this);;\n    this.selectOption = this.selectOption.bind(this);\n    this.updateSearch = this.updateSearch.bind(this);\n\n  }\n\n  getOptions() {\n    let options = (this.props.options || []).slice(0);\n    if(this.props.removeSelectedText) {\n      options.unshift({\n        content: this.props.removeSelectedText\n      });\n    }\n    return options;\n  }\n\n  updateSearch(value) {\n   \n    // For redux friendly usage\n    if(this.props.onInput) {\n      this.props.onInput(value);\n      return;\n    }\n\n    // Could also potentially call an API handler here ...\n    if(this.props.apiCall) {\n      this.props.apiCall(value).then(options => this.setState({options}));\n      return\n    }\n\n    this.setState({options: this.getOptions().filter(option => {\n      return (option.displayName || option.content).toLowerCase().indexOf(value.toLowerCase()) !== -1;\n    })})\n    \n  }\n  \n  selectOption(option) {\n    this.setState({selected: option.value === undefined ? null : option});\n    if(this.props.onChange) {\n      this.props.onChange(option);\n    }\n    this.close();\n  }\n  \n  clickOutsideOfWidget(e) {\n    if(!this.root) return;\n    // Won't work with portals .... perhaps capture click on parent and prevent propagation instead?\n    function hasParent(parent, element) {\n      if(parent === element) return true;\n      if(!element) return false;\n      return hasParent(parent, element.parentElement);\n    }\n    const root = this.root.querySelector('.dropdown__dropdown-container');\n    if(!root) return;\n    if(hasParent(this.root, e.target)) return;\n    this.close();\n  }\n  \n  // Make sure select is opened on keydown.\n  // Also open and prefill search box if letter is typed\n  onButtonKeyDown(e) {\n    // Ignore keydowns on button if widget is open.\n    if(this.state.open) return;\n\n    // Dont override custom or browsers key shortcuts.\n    if(e.shiftkey || e.ctrlKey || e.altKey) return;\n    \n    const keyCode = e.which || e.keyCode;\n\n    console.log((e.which || e.keyCode) + e.key);\n\n    // Key up/down and enter/space\n    if([40, 38, 32, 13].some(code => code === keyCode)) {\n      if(!this.state.open) {\n        e.stopPropagation();\n        e.preventDefault();\n        this.open();\n      }\n    } else if(/\\w/.test(e.key) && e.key.length === 1) {\n      // Ignore Special keys \n      if(keyCode <= 46 || keyCode === 91) return;\n      e.stopPropagation();\n      e.preventDefault();\n      this.open();\n      this.setState({query: e.key})\n    }\n  }\n              \n  getButtonContent() {\n    if(this.state.selected === null || this.state.selected.value === undefined) return null;\n    return this.state.selected.displayName || this.state.selected.content;\n  }\n  \n  cleanUp() {\n    window.removeEventListener('click', this.clickOutsideOfWidget);\n    window.removeEventListener('focus', this.clickOutsideOfWidget);\n    document.body.classList.remove('dropdown__prevent-scroll');\n  }\n\n  open() {\n    if(this.state.open || this.props.readonly) return;\n\n    this.setState({open: true});\n    \n    // Clicking outside of dropdown when dropdown is open should close it again\n    window.addEventListener('click', this.clickOutsideOfWidget);\n    window.addEventListener('focus', this.clickOutsideOfWidget, true);\n    document.body.classList.add('dropdown__prevent-scroll');\n  }\n\n  // Make it controllable which option that are selected\n  componentWillReceiveProps(nextProps) {\n    if(this.props.selected && this.props.selected.value === nextProps.selected.value) return\n\n    this.setState({selected: nextProps.selected});\n  }\n  \n  close() {\n    if(!this.state.open) return;\n    this.setState({open: false, options: this.getOptions(), query: ''});\n    this.cleanUp();\n    this.root.querySelector('button').focus();\n  }\n\n  componentWillUnmount() {\n    this.cleanUp();\n  }\n\n  render() {\n    return (\n      <div ref={root => this.root = root} className={\"dropdown--wrapper \" + this.props.className} onkeydown={_ => console.log('keydown')}>\n        <input type=\"hidden\" name={this.props.name} value={this.state.selected !== null ? this.state.selected.value : ''} />\n        <SelectButton\n          value={this.getButtonContent()}\n          label={this.props.label}\n          hideLabelWhenSelected={this.props.hideLabelWhenSelected}\n          onClick={_ => this.state.open ? this.close() : this.open()}\n          expanded={this.state.open}\n          onKeyDown={this.onButtonKeyDown}\n          disabled={this.props.disabled}\n          removeSelectedText={this.props.removeSelectedText}\n          readonly={this.props.readonly}></SelectButton> \n        {this.state.open ? <SelectDropdown\n                             button={this.root}\n                             query={this.state.query}\n                             updateSearch={this.updateSearch}\n                             selectOption={this.selectOption}\n                             hideSearch={this.props.hideSearch}\n                             selected={this.state.selected}\n                             createNew={this.props.createNew}\n                             options={this.state.options}></SelectDropdown> : null}\n        {\n          this.state.selected && this.props.viewLink ?\n          <div className=\"dropdown---helper-text\">\n            <a href={this.props.viewLink(this.state.selected)} target=\"_blank\">{this.props.viewLinkText || this.getButtonContent()}</a>\n          </div>\n          :\n          null\n        }\n     </div>\n    )\n  }\n}\n\n\n"]}